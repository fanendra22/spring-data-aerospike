#aerospike db configurations
aerospike.hosts=localhost:3000
aerospike.user=
aerospike.password=

#Aerospike client related parameters
aerospike.timeout=100
aerospike.maxThreads=500
aerospike.maxSocketIdle=14
aerospike.tendInterval=1000
aerospike.failIfNotConnected=true
aerospike.sharedThreadPool=true

#Default read policy
###########################################################################
#Priority of request relative to other transactions.
#Currently, only used for scans.
readPolicy.priority=DEFAULT
	
#Transaction timeout in milliseconds.
#This timeout is used to set the socket timeout and is also sent to the 
#server along with the transaction in the wire protocol.
#Default to no timeout (0).

readPolicy.timeout=100
	
#Maximum number of retries before aborting the current transaction.
#A retry is attempted when there is a network error other than timeout.  
#If maxRetries is exceeded, the abort will occur even if the timeout 
#has not yet been exceeded.  The default number of retries is 2.

readPolicy.maxRetries=3

#Milliseconds to sleep between retries if a transaction fails and the 
#timeout was not exceeded.  Enter zero to skip sleep.
#The default sleep between retries is 500 ms.

readPolicy.sleepBetweenRetries=500

#Default write policy across entities. For any change to a particular entity
#property should be defined as ClassName.propertyname=new value
############################################################################
#Defines behaviour for write operation. Values could be one of

#UPDATE 
#Create or update record. Merge write command bins with existing bins.
 
#UPDATE_ONLY
#Update record only. Fail if record does not exist. Merge write command bins with existing bins.

#REPLACE
#Create or replace record. Delete existing bins not referenced by write command bins. 
#Supported by Aerospike 2 server versions >= 2.7.5 and Aerospike 3 server versions >= 3.1.6.

#REPLACE_ONLY
#Replace record only. Fail if record does not exist. Delete existing bins not referenced by 
#write command bins. Supported by Aerospike 2 server versions >= 2.7.5 and 
#Aerospike 3 server versions >= 3.1.6.

#CREATE_ONLY
#Create only.  Fail if record exists.

writePolicy.recordExistsAction=UPDATE

#Qualify how to handle record writes based on record generation. The default (NONE)
#indicates that the generation is not used to restrict writes.
	 
#NONE
#Do not use record generation to restrict writes.

#EXPECT_GEN_EQUAL	
#Update/delete record if expected generation is equal to server generation. Otherwise, fail. 

#EXPECT_GEN_GT 
#Update/delete record if expected generation greater than the server generation. Otherwise, fail.
#This is useful for restore after backup. 
	 
#DUPLICATE	
#Create duplicate record if expected generation is not equal to server generation.
#Duplicates are only created when the server configuration option "allow-versions" 
#is true (default is false).

writePolicy.generationPolicy=NONE

#Expected generation. Generation is the number of times a record has been modified
#(including creation) on the server. If a write operation is creating a record, 
#the expected generation would be <code>0</code>.  

writePolicy.generation=1

#Record expiration. Also known as ttl (time to live). Seconds record will live 
#before being removed by the server.
#Expiration values:
#-1: Never expire for Aerospike 2 server versions >= 2.7.2 and Aerospike 3 server
#versions >= 3.1.4.  Do not use -1 for older servers
#0: Default to namespace configuration variable "default-ttl" on the server.</li>
#>0: Actual expiration in seconds.

writePolicy.expiration=-1
	
#Send user defined key in addition to hash digest on a record put.  
#The default is to not send the user defined key as i can save some
#network bandwidth.

writePolicy.sendKey=false

#Default batch policy
#################################################################################
#Maximum number of concurrent batch request threads to server nodes at any point in time.
#If there are 16 node/namespace combinations requested and maxConcurrentThreads is 8, 
#then batch requests will be made for 8 node/namespace combinations in parallel threads.
#When a request completes, a new request will be issued until all 16 threads are complete.

#1: Issue batch requests sequentially.  This mode has a performance advantage for small
#to medium sized batch sizes because requests can be issued in the main transaction thread.
#This is the default.
#0: Issue all batch requests in parallel threads.  This mode has a performance
#advantage for extremely large batch sizes because each node can process the request
#immediately.  The downside is extra threads will need to be created (or taken from
#a thread pool).
# > 0: Issue up to maxConcurrentThreads batch requests in parallel threads.  When a request
#completes, a new request will be issued until all threads are complete.  This mode
#prevents too many parallel threads being created for large cluster implementations.
#The downside is extra threads will still need to be created (or taken from a thread pool).

batchPolicy.maxConcurrentThreads=50